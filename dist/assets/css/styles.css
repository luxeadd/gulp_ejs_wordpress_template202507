@charset "UTF-8";
:root {
  --innerValue: 1100;
  --inner: var(--innerValue) * 1px;
  --padding-pc: 25px;
  --padding-sp: 20px;
  --light: 300;
  --normal: 400;
  --medium: 500;
  --semi-bold: 600;
  --bold: 700;
  --ex-bold: 800;
  --base-font-family: "Helvetica Neue", Arial, "Hiragino Kaku Gothic ProN", "Hiragino Sans", Meiryo, sans-serif;
  --base-color: #666;
  --base-background: #fff;
  --back: #333;
  --black: #333;
  --white: #fff;
  --btn-fucus: #fff;
  --header: 100;
  --hamburger: 103;
  --drawer: 102;
  --drawer-back: 101;
  --page-top: 99;
  --base-line-height: 1.5;
  --duration: 0.3s ease;
}

/********************************
* セッティング反映
********************************/
body {
  background: var(--base-background);
  color: var(--base-color);
  font-weight: var(--normal);
  line-height: var(--base-line-height);
  font-family: var(--base-font-family);
}

a:focus-visible,
button:focus-visible {
  outline: 2px solid #007bff;
}

/********************************
* font埋め込み
********************************/
.u-desktop {
  display: block;
}
@media screen and (max-width: 767px) {
  .u-desktop {
    display: none;
  }
}

.u-mobile {
  display: none;
}
@media screen and (max-width: 767px) {
  .u-mobile {
    display: block;
  }
}

/* リキッドレイアウト対応 */
html {
  font-size: 16px;
}
@media (max-width: 1100px) {
  html {
    font-size: clamp(10px, 16 / 1100 * 100vw, 16px);
  }
}
@media screen and (max-width: 767px) {
  html {
    font-size: 16px;
  }
}
@media (max-width: 375px) {
  html {
    font-size: clamp(10px, 16 / 375 * 100vw, 16px);
  }
}

/*! kiso.css v1.2.2 | MIT License | https://github.com/tak-dcxi/kiso.css */
/* ======================================================
//  MARK: Universal
// ====================================================== */
*,
::before,
::after {
  /*
  * Includes `padding` and `border` in the element's specified dimensions.
  * It is highly recommended to set `box-sizing: border-box;` by default, as it makes styling much easier, especially when specifying `width: 100%;`.
  */
  box-sizing: border-box;
}

/* ======================================================
//  MARK: Document and Body Elements
// ====================================================== */
:where(:root) {
  /* Remove space when punctuation marks are adjacent, and also remove leading spaces in a line. */
  text-spacing-trim: trim-start;
  /* Improves readability by inserting a small space between Japanese and alphanumeric characters. */
  text-autospace: normal;
  /*
  * Mobile browsers have an algorithm that automatically adjusts font sizes to prevent text from becoming too small.
  * This controls the auto-adjustment feature to prevent unwanted resizing.
  */
  -webkit-text-size-adjust: 100%;
  -moz-text-size-adjust: 100%;
       text-size-adjust: 100%;
  /* Suppresses the tap highlight on iOS. */
  -webkit-tap-highlight-color: transparent;
  /*
  * For accessibility, it is recommended to set the `line-height` to at least 1.5 times the text size within paragraphs.
  * @see https://waic.jp/translations/WCAG21/#visual-presentation
  */
  line-height: 1.5;
  /* In Safari, if `font-family` is not specified, a serif font is applied by default, so `sans-serif` is set as the default here. */
  font-family: sans-serif;
  /* Prevents misreading by applying strict line-breaking rules. */
  line-break: strict;
  /* Wraps English words mid-word. Specifying `anywhere` also prevents content from overflowing in layouts like `flex` or `grid`. */
  overflow-wrap: anywhere;
  /* Prevents layout shift caused by the appearance or disappearance of the scrollbar. */
  scrollbar-gutter: stable;
}

:where(body) {
  /*
  * When creating a sticky footer, a minimum height is often required.
  * Setting the `min-block-size` to the dynamic viewport height ensures enough space for the footer.
  */
  min-block-size: 100dvb;
  /* The `margin` specified in the User Agent (UA) stylesheet is often unnecessary, so it is reset here. */
  margin: unset;
}

/* ======================================================
// MARK: Sections
// ------------------------------------------------------ */
:where(h1, h2, h3, h4, h5, h6) {
  /* Prevents the last line of text from ending with a single word, which can look awkward (known as an orphan). */
  text-wrap: pretty;
}

:where(h1) {
  /*
  * Adjusts user agent (UA) styles for `h1` elements within sectioning content.
  * This addresses DevTools warnings that appear when `h1` elements nested within sectioning content lack `font-size` and `margin` properties.
  * @see https://html.spec.whatwg.org/#sections-and-headings
  */
  margin-block: 0.67em;
  font-size: 2em;
}

:where(h2, h3, h4, h5, h6) {
  /* The `margin-block` specified in the User Agent (UA) stylesheet is often unnecessary, so it is reset. */
  margin-block: unset;
}

:where(search) {
  /*
  * The `<search>` element is supported from Safari 17.
  * This prevents it from being displayed as an inline element in unsupported environments.
  */
  display: block flow;
}

/* ======================================================
//  MARK: Grouping content
// ====================================================== */
:where(p, blockquote, figure, pre, address, ul, ol, dl, menu) {
  /* The `margin-block` specified in the User Agent (UA) stylesheet is often unnecessary, so it is reset. */
  margin-block: unset;
}

:where(blockquote, figure) {
  /* The `margin-inline` specified in the User Agent (UA) stylesheet is often unnecessary, so it is reset. */
  margin-inline: unset;
}

:where(p:lang(en)) {
  /*
  * In English, a single word on the last line is called a "widow" or "orphan" and is considered something to avoid as it makes the text harder to read.
  * Therefore, when lang="en", this prevents the last line from ending with a single word.
  */
  text-wrap: pretty;
}

:where(address:lang(ja)) {
  /* Italic style is not common in Japanese, so the `font-style` is reset. */
  font-style: unset;
}

:where(ul, ol, menu) {
  /* The `padding-inline-start` specified in the User Agent (UA) stylesheet is often unnecessary, so it is reset. */
  -webkit-padding-start: unset;
          padding-inline-start: unset;
  /*
  * In Safari, using `list-style: none` prevents screen readers from announcing lists.
  * `list-style-type: ""` is used to hide markers without affecting accessibility.
  * @see https://matuzo.at/blog/2023/removing-list-styles-without-affecting-semantics
  */
  list-style-type: "";
}

:where(dt) {
  /* It is common to display `<dt>` elements in bold, so `font-weight: bolder;` is set by default. */
  font-weight: bolder;
}

:where(dd) {
  /* The `margin-inline-start` specified in the User Agent (UA) stylesheet is often unnecessary, so it is reset. */
  -webkit-margin-start: unset;
          margin-inline-start: unset;
}

:where(pre) {
  /*
  * Since `text-spacing-trim` can affect spacing in `<pre>` elements even with its initial value, the final rendering may depend on the user's font settings.
  * To ensure consistent alignment, `space-all` is explicitly specified and inheritance is prevented.
  */
  text-spacing-trim: space-all;
  /* Set to `no-autospace` as it can cause misalignment with monospaced fonts. */
  text-autospace: no-autospace;
}

/* ======================================================
//  MARK: Text-level semantics
// ====================================================== */
:where(em:lang(ja)) {
  /* In Japanese, emphasis is commonly represented by bold text, so `font-weight: bolder;` is set by default. */
  font-weight: bolder;
}

:where(:is(i, cite, em, dfn, var):lang(ja)) {
  /* Italic style is not common in Japanese, so the `font-style` is reset. */
  font-style: unset;
}

:where(code, kbd, samp) {
  /* Font feature settings can have adverse effects on monospaced fonts, so their values are explicitly set to `initial` to prevent inheritance. */
  font-feature-settings: initial;
  /* Resets the `font-size` specified in the UA stylesheet to allow inheritance. */
  font-size: unset;
  /*
  * Set a monospace font family referencing Tailwind.
  * @see https://tailwindcss.com/docs/font-family
  */
  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
  /*
  * Disables font ligatures for programming fonts (like Fira Code)
  * to prevent character combinations like `=>` from being rendered as a single symbol (e.g., `⇒`).
  */
  font-variant-ligatures: none;
  font-variation-settings: initial;
}

:where(abbr[title]) {
  /*
  * The `<abbr>` element with the `title` attribute isn't helpful regarding accessibility because support is inconsistent, and it's only accessible to some users.
  * This rule shows a dotted underline on abbreviations in all browsers (there's a bug in Safari) and changes the cursor.
  * @see https://adrianroselli.com/2024/01/using-abbr-element-with-title-attribute.html
  */
  text-decoration-line: underline;
  text-decoration-style: dotted;
  cursor: help;
}

:where(time) {
  /* Set to `no-autospace` because date notations in typography do not include spaces. */
  text-autospace: no-autospace;
}

@media (forced-colors: active) {
  :where(mark) {
    /*
    * In forced-colors mode, the color of the mark element may not change, which can be problematic. Use system colors in forced-colors mode.
    * @see https://adrianroselli.com/2017/12/tweaking-text-level-styles.html#MarkWHCM
    */
    background-color: Highlight;
    color: HighlightText;
  }
}
@media print {
  :where(mark) {
    /*
    * Not all printers support color, and users might print in grayscale.
    * It's worth adding a non-disruptive style that scales with the text, as an alternative to relying only on background color.
    * @see https://adrianroselli.com/2017/12/tweaking-text-level-styles.html#MarkPrint
    */
    border-width: 1px;
    border-style: dotted;
  }
}
/* ======================================================
//  MARK: Links
// ====================================================== */
:where(a:-moz-any-link) {
  /* The default `color` from the UA stylesheet is rarely used as is, so it's reset to allow inheritance. */
  color: unset;
  /*
  * While link underlines can be useful, they are often obstructive.
  * They are disabled by default.
  * If needed, restore them using `text-decoration-line: revert;`.
  */
  text-decoration-line: unset;
  /* Set the underline thickness to the font's default thickness. */
  text-decoration-thickness: from-font;
}
:where(a:any-link) {
  /* The default `color` from the UA stylesheet is rarely used as is, so it's reset to allow inheritance. */
  color: unset;
  /*
  * While link underlines can be useful, they are often obstructive.
  * They are disabled by default.
  * If needed, restore them using `text-decoration-line: revert;`.
  */
  text-decoration-line: unset;
  /* Set the underline thickness to the font's default thickness. */
  text-decoration-thickness: from-font;
}

/* ======================================================
//  MARK: Embedded content
// ====================================================== */
:where(img, svg, picture, video, canvas, model, audio, iframe, embed, object) {
  /* Prevents overflow by setting the maximum width to `100%`. */
  max-inline-size: 100%;
  /* Automatically adjust block size based on content. */
  block-size: auto;
  /* Prevents extra space from appearing at the bottom of the element. */
  vertical-align: bottom;
}

:where(iframe) {
  /* The `border` specified in the UA stylesheet is often unnecessary, so it is reset. */
  border: unset;
}

/* ======================================================
//  MARK: Tabular data
// ====================================================== */
:where(table) {
  /* Collapse borders for a more refined table design. */
  border-collapse: collapse;
}

:where(caption, th) {
  /* The `text-align` specified in the UA stylesheet is often unnecessary, so it is reset. */
  text-align: unset;
}

:where(caption) {
  /* Prevents the last line of text from ending with a single word, which can look awkward (known as an orphan). */
  text-wrap: pretty;
}

/* ======================================================
//  MARK: Forms
// ====================================================== */
:where(button, input, select, textarea),
::file-selector-button {
  /*
  * These elements are often styled with a border, so a `1px` border is applied by default for consistency.
  * This ensures readability even for unstyled elements.
  * When resetting, it's recommended to use `border-color: transparent` instead of `border: none` to account for forced color modes.
  */
  border-width: 1px;
  border-style: solid;
  border-radius: unset;
  /* These styles specified in the UA stylesheet are often unnecessary, so they are reset to allow for inheritance. */
  border-color: unset;
  color: unset;
  font: unset;
  letter-spacing: unset;
  text-align: unset;
}

:where(input:is([type=radio i], [type=checkbox i])) {
  /* The `margin` specified in the User Agent (UA) stylesheet is often unnecessary, so it is reset here. */
  margin: unset;
}

:where(input[type=file i]) {
  /* The `border` is often unnecessary, so it is reset here. */
  border: unset;
}

:where(input[type=search i]) {
  /* Remove the rounded corners of search inputs on macOS and normalize the background color. */
  -webkit-appearance: textfield;
}

@supports (-webkit-touch-callout: none) {
  :where(input[type=search i]) {
    /* normalize the background color on iOS. */
    background-color: Canvas;
  }
}
:where(input:is([type=tel i],
[type=url i],
[type=email i],
[type=number i]):not(:-moz-placeholder-shown)) {
  /*
  * Certain input types need to maintain left alignment even in right-to-left (RTL) languages.
  * However, this only applies when the value is not empty, as the placeholder should be right-aligned.
  * @see https://rtlstyling.com/posts/rtl-styling#form-inputs
  */
  direction: ltr;
}
:where(input:is([type=tel i],
[type=url i],
[type=email i],
[type=number i]):not(:placeholder-shown)) {
  /*
  * Certain input types need to maintain left alignment even in right-to-left (RTL) languages.
  * However, this only applies when the value is not empty, as the placeholder should be right-aligned.
  * @see https://rtlstyling.com/posts/rtl-styling#form-inputs
  */
  direction: ltr;
}

:where(textarea) {
  /* The `margin-block` specified in Firefox's UA stylesheet is often unnecessary, so it is reset. */
  margin-block: unset;
  /* Allows vertical resizing for `<textarea>` elements. */
  resize: block;
}

:where(input:not([type=button i], [type=submit i], [type=reset i]),
textarea,
[contenteditable]) {
  /* Set to `no-autospace` because `text-autospace` can insert spaces during input, potentially causing erratic behavior. */
  text-autospace: no-autospace;
}

:where(button,
input:is([type=button i], [type=submit i], [type=reset i])),
::file-selector-button {
  /* The `background-color` specified in the User Agent (UA) stylesheet is often unnecessary, so it is reset here. */
  background-color: unset;
}

:where(button,
input:is([type=button i], [type=submit i], [type=reset i]),
[role=tab i],
[role=button i],
[role=option i]),
::file-selector-button {
  /*
  * On iOS, double-tapping a button can cause zooming, which harms usability.
  * `touch-action: manipulation` is specified to disable zooming on double-tap.
  * Third-party plugins such as Swiper sometimes use div elements with these roles as buttons, since double-tapping a div can still trigger zooming, it's advisable to specify this property.
  */
  touch-action: manipulation;
}

:where(button:enabled,
label[for],
select:enabled,
input:is([type=button i],
[type=submit i],
[type=reset i],
[type=radio i],
[type=checkbox i]):enabled,
[role=tab i],
[role=button i],
[role=option i]),
:where(:enabled)::file-selector-button {
  /* Indicate clickable elements with a pointer cursor. */
  cursor: pointer;
}

:where(fieldset) {
  /*
  * Prevent fieldset from causing overflow.
  * Reset the default `min-inline-size: min-content` to prevent children from stretching fieldset.
  * @see https://github.com/twbs/bootstrap/issues/12359
  */
  min-inline-size: 0;
  /* The following default styles are often unnecessary, so they are reset. */
  margin-inline: unset;
  padding: unset;
  border: unset;
}

:where(legend) {
  /* The default `padding-inline` is often unnecessary, so it is reset. */
  padding-inline: unset;
}

:where(progress) {
  /* Resets the vertical alignment of the `<progress>` element to its initial value. */
  vertical-align: unset;
}

::-moz-placeholder {
  /* Standardize the opacity of placeholder text (it may be set lower by default in Firefox). */
  opacity: unset;
}

::placeholder {
  /* Standardize the opacity of placeholder text (it may be set lower by default in Firefox). */
  opacity: unset;
}

/* ======================================================
//  MARK: Interactive elements
// ====================================================== */
:where(summary) {
  /* The default triangle marker is often unnecessary, so it is disabled. */
  list-style-type: "";
  /* Changing the cursor to a pointer clarifies the clickability of the element. */
  cursor: pointer;
}

:where(summary)::-webkit-details-marker {
  /* In Safari versions earlier than 18.4 (released in April 2025), a triangle icon is displayed using the -webkit-details-marker CSS pseudo-element, so it should be removed. */
  display: none;
}

:where(dialog, [popover]) {
  /* The following default styles are often unnecessary, so they are reset. */
  padding: unset;
  /*
  * When these fixed-position elements are scrolled, preventing scroll chaining on the underlying page and bounce effects on mobile improves usability.
  * Disabling block-direction scroll chaining is recommended.
  */
  overscroll-behavior-block: contain;
  border: unset;
}

:where(dialog:not([open], [popover]), [popover]:not(:popover-open)) {
  /*
  * These elements can be easily displayed by explicitly setting their `display` property.
  * To prevent them from appearing when not in an open state, they are forcibly hidden.
  */
  display: none !important;
}

:where(dialog) {
  /*
  * The max width and height of a `<dialog>` element are typically determined by the design.
  * These UA stylesheet properties are reset as they can be obstructive, especially when trying to make the dialog full-screen.
  */
  max-inline-size: unset;
  max-block-size: unset;
}

:where(dialog)::backdrop {
  /* Normalize the background color of the `::backdrop` element. */
  background-color: oklch(0% 0 0deg/30%);
}

:where([popover]) {
  /*
  * While the UA stylesheet's `margin` for `<dialog>` elements is useful for centering with `inset: 0`,
  * but `margin` for `popover` elements is often obstructive as they frequently use Anchor Positioning.
  */
  margin: unset;
}

/* ======================================================
//  MARK: Focus Styles
// ====================================================== */
:where(:focus-visible) {
  /* Add space between the content and the focus outline. */
  outline-offset: 3px;
}

[tabindex="-1"]:focus {
  /* Prevent programmatically focused elements from displaying an outline unless they are naturally focusable. */
  outline: none !important;
}

/* ======================================================
//  MARK: Misc
// ====================================================== */
:where(:disabled, [aria-disabled=true i]) {
  /* Display the default cursor on disabled elements to reflect their non-interactive state. */
  cursor: default;
}

[hidden]:not([hidden=until-found i]) {
  /* Ensure that elements intended to be hidden are not displayed, improving clarity and layout control. */
  display: none !important;
}

.c-accordion {
  overflow: hidden;
  border: 2px solid var(--base-color);
  border-radius: 9px;
}

.c-accordion__btn {
  display: block;
  position: relative;
  width: 100%;
  margin: 0;
  padding: 0;
  padding: calc(23 / 16 * 1rem) calc(75 / 16 * 1rem) calc(23 / 16 * 1rem) calc(47 / 16 * 1rem);
  border: 0;
  background: transparent;
  background: var(--base-color);
  color: var(--white);
  font-size: calc(19 / 16 * 1rem);
  text-align: left;
  transition: background var(--duration), opacity var(--duration);
}
@media screen and (max-width: 767px) {
  .c-accordion__btn {
    padding: calc(15 / 16 * 1rem) calc(45 / 16 * 1rem) calc(15 / 16 * 1rem) calc(20 / 16 * 1rem);
    font-size: calc(17 / 16 * 1rem);
  }
}
@media (any-hover: hover) {
  .c-accordion__btn:hover {
    opacity: 0.7;
  }
}
.c-accordion__btn::before, .c-accordion__btn::after {
  display: block;
  position: absolute;
  top: 50%;
  right: calc(45 / 16 * 1rem);
  width: calc(27 / 16 * 1rem);
  height: 3px;
  transform-origin: center center;
  border-radius: 10px;
  background: currentColor;
  content: "";
  transition: transform var(--duration);
}
@media screen and (max-width: 767px) {
  .c-accordion__btn::before, .c-accordion__btn::after {
    right: calc(20 / 16 * 1rem);
    width: calc(20 / 16 * 1rem);
  }
}
.c-accordion__btn::before {
  transform: translate(0%, -50%) rotate(90deg);
}
.c-accordion__btn::after {
  transform: translate(0%, -50%) rotate(0deg);
}
.c-accordion__btn[aria-expanded=true]::before {
  transform: translate(0%, -50%) rotate(0deg);
}

.c-accordion__body {
  display: grid;
  grid-template-rows: 0fr;
  padding-inline: calc(47 / 16 * 1rem);
  background: var(--white);
  transition: 250ms grid-template-rows ease, 250ms padding-block ease;
}
@media screen and (max-width: 767px) {
  .c-accordion__body {
    padding-inline: calc(20 / 16 * 1rem);
  }
}
.c-accordion__body > div {
  overflow: hidden;
}
.c-accordion__body[aria-hidden=false] {
  grid-template-rows: 1fr;
  padding-block: calc(30 / 16 * 1rem);
}
@media screen and (max-width: 767px) {
  .c-accordion__body[aria-hidden=false] {
    padding-block: calc(15 / 16 * 1rem);
  }
}

.c-accordion__answer {
  position: relative;
  padding-left: 1.5em;
}
.c-accordion__answer::before {
  display: block;
  position: absolute;
  top: 0;
  left: 0;
  content: "A.";
}

.c-btn {
  -webkit-user-select: none;
     -moz-user-select: none;
  inline-size: -moz-fit-content;
  inline-size: fit-content;
  outline-offset: 2px;
  touch-action: manipulation;
          user-select: none;
}
.c-btn:focus-visible {
  outline-offset: 2px;
}

.c-hamburger {
  --hamburger-color1: var(--white);
  --hamburger-color2: var(--white);
}
@media screen and (max-width: 767px) {
  .c-hamburger {
    -webkit-appearance: none;
    -moz-appearance: none;
    display: inline-block;
    appearance: none;
    position: relative;
    width: calc(50 / 16 * 1rem);
    height: calc(50 / 16 * 1rem);
    border: none;
    border-radius: 50%;
    background: var(--black);
    text-decoration: none;
    cursor: pointer;
    transition: background 0.3s ease;
  }
}

@media (hover: hover) {
  .c-hamburger:hover {
    background: var(--black);
  }
  .c-hamburger:hover .c-hamburger__line {
    background: var(--hamburger-color2);
  }
  .c-hamburger:hover[aria-expanded=true] .c-hamburger__line {
    background: transparent;
  }
}
.c-hamburger__line {
  display: block;
  position: absolute;
  top: 50%;
  left: 50%;
  width: calc(20 / 16 * 1rem);
  height: 1px;
  transform: translate(-50%, -50%);
  background: var(--hamburger-color1);
  transition: background 0.3s ease;
}

.c-hamburger__line::before,
.c-hamburger__line::after {
  display: block;
  position: absolute;
  width: 100%;
  height: 100%;
  background: inherit;
  content: "";
  transition: transform 0.3s ease;
}

.c-hamburger__line::before {
  top: calc(-6 / 16 * 1rem);
}

.c-hamburger__line::after {
  top: calc(6 / 16 * 1rem);
}

.c-hamburger[aria-expanded=true] {
  background: var(--black);
}
.c-hamburger[aria-expanded=true] .c-hamburger__line {
  background: transparent;
}
.c-hamburger[aria-expanded=true] .c-hamburger__line::before, .c-hamburger[aria-expanded=true] .c-hamburger__line::after {
  top: 0;
  background: var(--hamburger-color2);
}
.c-hamburger[aria-expanded=true] .c-hamburger__line::before {
  transform: rotate(45deg);
}
.c-hamburger[aria-expanded=true] .c-hamburger__line::after {
  transform: rotate(-45deg);
}

.c-modalMedical {
  width: min(1200px, 90vw);
  height: 80vh;
  margin: auto;
  border: 5px solid var(--base-color);
  border-radius: 21px;
  background: var(--white);
}

.c-modalMedical[open] {
  display: block;
}

.c-modalMedical {
  box-shadow: 0 0 0 100vmax rgba(0, 0, 0, 0.5);
  transition: opacity 0.5s;
}

.c-modalMedical__container {
  position: relative;
  height: inherit;
  block-size: 100%;
}

.c-modalMedical__inner {
  height: inherit;
  padding: calc(73 / 16 * 1rem) calc(30 / 16 * 1rem);
  overflow: scroll;
  overscroll-behavior: contain;
}
@media screen and (max-width: 767px) {
  .c-modalMedical__inner {
    padding: calc(40 / 16 * 1rem) calc(20 / 16 * 1rem);
  }
}

.c-modalMedical__img {
  aspect-ratio: 400/248;
  width: min(400px, 100%);
  margin-inline: auto;
}
.c-modalMedical__img img {
  -o-object-fit: cover;
  -o-object-position: center;
  width: 100%;
  height: 100%;
     object-fit: cover;
     object-position: center;
  border-radius: 30px;
}

.c-modalMedical__head {
  margin-top: calc(45 / 16 * 1rem);
}
@media screen and (max-width: 767px) {
  .c-modalMedical__head {
    margin-top: calc(30 / 16 * 1rem);
  }
}

.c-modalMedical__title {
  font-weight: var(--bold);
  font-size: calc(24 / 16 * 1rem);
  text-align: center;
}
@media screen and (max-width: 767px) {
  .c-modalMedical__title {
    font-size: calc(18 / 16 * 1rem);
  }
}

.c-modalMedical__body {
  margin-top: calc(55 / 16 * 1rem);
}
@media screen and (max-width: 767px) {
  .c-modalMedical__body {
    margin-top: calc(30 / 16 * 1rem);
  }
}

.c-modalMedical__close {
  position: absolute;
  top: 0;
  left: 0;
  aspect-ratio: 1/1;
  width: calc(59 / 16 * 1rem);
  transform: translate(-25%, -25%);
  border: 2px solid #a7a7a7;
  border-radius: 50%;
  background: var(--white);
  color: #a7a7a7;
}
.c-modalMedical__close::before, .c-modalMedical__close::after {
  display: block;
  position: absolute;
  top: 50%;
  left: 50%;
  width: 50%;
  height: 3px;
  background: currentColor;
  content: "";
}
.c-modalMedical__close::before {
  transform: translate(-50%, -50%) rotate(45deg);
}
.c-modalMedical__close::after {
  transform: translate(-50%, -50%) rotate(-45deg);
}

.c-page-top {
  visibility: hidden;
  z-index: var(--page-top);
  position: fixed;
  right: calc(20 / 16 * 1rem);
  bottom: calc(50 / 16 * 1rem);
  width: calc(45 / 16 * 1rem);
  height: calc(45 / 16 * 1rem);
  background: var(--white);
  cursor: pointer;
  opacity: 0;
  pointer-events: none;
  transition: 0.3s;
}

.c-page-top.is-active {
  visibility: visible;
  opacity: 1;
  pointer-events: initial;
}

.c-page-top span:first-child {
  display: inline-block;
  width: calc(20 / 16 * 1rem);
  height: calc(2 / 16 * 1rem);
  transform: rotate(-45deg) translateX(3px);
  transform-origin: right;
  background: var(--back);
  transition: 0.3s;
}

.c-page-top span:nth-child(2) {
  display: inline-block;
  width: calc(20 / 16 * 1rem);
  height: calc(2 / 16 * 1rem);
  transform: rotate(45deg) translateX(-3px);
  transform-origin: left;
  background: var(--back);
  transition: 0.3s;
}

.c-page-top:hover {
  background: var(--back);
}
.c-page-top:hover span {
  background: var(--white);
}

.c-panel {
  display: block;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: space-around;
  min-height: calc(237 / 16 * 1rem);
  padding: calc(30 / 16 * 1rem) calc(10 / 16 * 1rem);
  gap: calc(20 / 16 * 1rem);
  border: 3px solid var(--base-color);
  border-radius: 21px;
  background: var(--white);
  cursor: pointer;
  transition: opacity 0.3s;
}
@media screen and (max-width: 767px) {
  .c-panel {
    min-height: calc(180 / 16 * 1rem);
    padding: calc(20 / 16 * 1rem) calc(5 / 16 * 1rem);
  }
}
@media (any-hover: hover) {
  .c-panel:hover {
    opacity: 0.7;
  }
}

.c-panel__img {
  width: min(126px, 100%);
}
@media screen and (max-width: 767px) {
  .c-panel__img {
    width: min(100px, 100%);
  }
}

.c-panel__text {
  display: block;
  position: relative;
  width: 100%;
  color: var(--base-color);
  font-weight: var(--bold);
  font-size: calc(19 / 16 * 1rem);
  line-height: 1.3157894737;
  text-align: center;
}
@media screen and (max-width: 767px) {
  .c-panel__text {
    padding-inline: calc(10 / 16 * 1rem);
  }
}
.c-panel__text::before, .c-panel__text::after {
  display: block;
  position: absolute;
  top: 50%;
  right: calc(4 / 16 * 1rem);
  width: 7px;
  height: 2px;
  transform-origin: center right;
  border-radius: 10px;
  background: #FBA49B;
  content: "";
}
@media screen and (max-width: 767px) {
  .c-panel__text::before, .c-panel__text::after {
    right: calc(2 / 16 * 1rem);
  }
}
.c-panel__text::before {
  transform: translate(0%, -50%) rotate(45deg);
}
.c-panel__text::after {
  transform: translate(0%, -50%) rotate(-45deg);
}
@media screen and (max-width: 767px) {
  .c-panel__text {
    font-size: calc(13 / 16 * 1rem);
  }
}

.pagination {
  display: inline-block;
}
.pagination .nav-links {
  display: flex;
  gap: calc(15 / 16 * 1rem);
}
@media screen and (max-width: 767px) {
  .pagination .nav-links {
    gap: calc(10 / 16 * 1rem);
  }
}
.pagination .page-numbers {
  display: grid;
  place-content: center;
  aspect-ratio: 1;
  width: calc(80 / 16 * 1rem);
  padding: calc(10 / 16 * 1rem);
  border: 1px solid #ccc;
  border-radius: 50%;
  background: #fff;
  color: var(--base-color);
  font-weight: var(--bold);
  font-size: calc(16 / 16 * 1rem);
  transition: all 0.3s ease;
}
@media screen and (max-width: 767px) {
  .pagination .page-numbers {
    width: calc(35 / 16 * 1rem);
    padding: calc(5 / 16 * 1rem);
    font-size: calc(12 / 16 * 1rem);
  }
}
@media (hover: hover) {
  .pagination .page-numbers:hover {
    background: var(--base-color);
    color: #fff;
  }
}
.pagination .current {
  background: var(--base-color);
  color: #fff;
}
.pagination .prev,
.pagination .next {
  position: relative;
}
.pagination .prev::after,
.pagination .next::after {
  display: block;
  position: absolute;
  width: calc(22 / 16 * 1rem);
  height: calc(16 / 16 * 1rem);
  margin: auto;
  inset: 0;
  content: "";
}
@media screen and (max-width: 767px) {
  .pagination .prev::after,
  .pagination .next::after {
    width: calc(15 / 16 * 1rem);
    height: calc(11 / 16 * 1rem);
  }
}
.pagination .prev {
  transform: rotate(180deg);
}
.pagination .dots {
  background: transparent;
  box-shadow: none;
}

.l-inner {
  width: 100%;
  max-width: calc(var(--inner) + var(--padding-pc) * 2);
  margin-inline: auto;
  padding-inline: var(--padding-pc);
}
@media screen and (max-width: 767px) {
  .l-inner {
    padding-inline: var(--padding-sp);
  }
}

.l-parts {
  width: 100%;
  height: 100%;
  padding: calc(100 / 16 * 1rem) 0;
  background-color: #9cdbe8;
}

.l-parts__sec {
  padding: calc(50 / 16 * 1rem) 0;
}

.form {
  --formBorderColor: #ccc;
  --formRequiredColor: #f44949;
  --formOutLineColor: #007bff;
  --formRadioCheckColor: #222;
  --formCheckBoxColor: #007bff;
  --formAgreeColorColor: #0f0102;
  --formSubmitHoverColor: #007bff;
  --formDisableColor: #ccc;
  --formConfirmColor: #fff;
  --formInputHeight: rem(50);
}

.form {
  max-width: 782px;
  margin-inline: auto;
}
@media screen and (max-width: 767px) {
  .form {
    max-width: 500px;
  }
}

.form__content {
  display: flex;
  align-items: flex-start;
  gap: calc(20 / 16 * 1rem);
}
@media screen and (max-width: 767px) {
  .form__content {
    display: block;
  }
}
.form__content.st_center {
  align-items: center;
}
.form__content.st_center .form__head {
  margin-top: initial;
}

.form__content + .form__content {
  margin-top: calc(15 / 16 * 1rem);
}

.form__content.form__contentButton {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  width: 100%;
  margin-top: calc(50 / 16 * 1rem);
  gap: calc(30 / 16 * 1rem) calc(50 / 16 * 1rem);
}
.form__content.form__contentButton > p {
  display: inherit;
  flex-wrap: inherit;
  justify-content: inherit;
  width: inherit;
  gap: inherit;
}
.form__content.form__contentButton br {
  display: none;
}

.form__contentCheckbox {
  text-align: center;
}

.form__head {
  display: flex;
  flex: 0 0 calc(265 / 16 * 1rem);
  align-items: center;
  justify-content: flex-end;
  margin-top: calc(18 / 16 * 1rem);
  gap: calc(10 / 16 * 1rem);
}
@media screen and (max-width: 767px) {
  .form__head {
    flex: initial;
    justify-content: flex-start;
  }
}

.form__title {
  font-weight: var(--bold);
  font-size: calc(16 / 16 * 1rem);
  line-height: 1.875;
  letter-spacing: 0.1em;
}

.form__confirm {
  display: flex;
  align-items: center;
  min-height: var(--formInputHeight);
  font-size: calc(16 / 16 * 1rem);
  line-height: 1.875;
  letter-spacing: 0.1em;
}

.form__required {
  display: grid;
  place-content: center;
  min-width: calc(60 / 16 * 1rem);
  min-height: calc(30 / 16 * 1rem);
  padding: calc(3 / 16 * 1rem);
  border-radius: 5px;
  background: currentColor;
  color: var(--formRequiredColor);
  font-weight: bold;
  font-size: calc(13 / 16 * 1rem);
  line-height: 1;
  letter-spacing: 0.1em;
}

.form__item {
  flex: 1;
  max-width: calc(500 / 16 * 1rem);
}
@media screen and (max-width: 767px) {
  .form__item {
    max-width: initial;
    margin-top: calc(10 / 16 * 1rem);
  }
}
.form__item.st_large {
  max-width: initial;
}
.form__item .c-text {
  margin-top: initial;
  padding: calc(10 / 16 * 1rem) calc(10 / 16 * 1rem);
}
.form__item br {
  display: none;
}

.formText {
  -moz-appearance: none;
  -webkit-appearance: none;
  appearance: none;
  width: 100%;
  min-height: var(--formInputHeight);
  padding: calc(8 / 16 * 1rem) calc(8 / 16 * 1rem);
  border: 1px solid var(--formBorderColor);
  background-image: none;
  background-color: var(--white);
  color: inherit;
  font-size: calc(16 / 16 * 1rem);
  font-family: inherit;
}
.formText:focus {
  outline: 2px solid var(--formOutLineColor);
  box-shadow: none;
}
.formText::-moz-placeholder {
  color: inherit;
}
.formText::placeholder {
  color: inherit;
}
.formText:focus::-moz-placeholder {
  color: transparent;
}
.formText:focus::placeholder {
  color: transparent;
}

.formRadio {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  align-items: center;
  min-height: var(--formInputHeight);
  padding-left: calc(10 / 16 * 1rem);
  gap: calc(5 / 16 * 1rem) calc(10 / 16 * 1rem);
}
.formRadio > p {
  display: contents;
}
.formRadio br {
  display: none;
}
.formRadio label {
  position: relative;
  width: -moz-fit-content;
  width: fit-content;
}
.formRadio input[type=radio] {
  clip: rect(0 0 0 0);
  -webkit-clip-path: inset(50%);
  position: absolute;
  width: 100%;
  height: 100%;
  padding: 0;
  overflow: hidden;
  border: 0;
  white-space: nowrap;
          clip-path: inset(50%);
}
.formRadio input[type=radio]:focus-visible + span {
  outline: 2px solid var(--formRequiredColor);
}
.formRadio input[type=radio] + span {
  display: inline-block;
  position: relative;
  padding: 5px 15px 6px 25px;
  cursor: pointer;
}
.formRadio input[type=radio] + span::before {
  -webkit-transform: translateY(-50%);
  display: block;
  position: absolute;
  top: 50%;
  left: 0;
  aspect-ratio: 1/1;
  width: calc(16 / 16 * 1rem);
  transform: translateY(-50%);
  border: 1px solid rgba(0, 0, 0, 0.16);
  border-radius: 50%;
  background: #fff;
  content: "";
}
.formRadio input[type=radio] + span::after {
  -webkit-transform: translateY(-50%);
  position: absolute;
  top: 50%;
  left: 0;
  aspect-ratio: 1/1;
  width: calc(16 / 16 * 1rem);
  padding: 2px;
  transform: translateY(-50%);
  border: 1px solid transparent;
  border-radius: 50%;
  background: var(--formRadioCheckColor);
  content: "";
  opacity: 0;
  transition: all 0.3s ease 0s;
}
.formRadio input[type=radio]:checked + span::after {
  opacity: 1;
}

.formSelect {
  width: -moz-fit-content;
  width: fit-content;
  max-width: 100%;
  padding: calc(5 / 16 * 1rem) calc(10 / 16 * 1rem);
  border: 1px solid var(--formBorderColor);
  font-size: calc(16 / 16 * 1rem);
}
.formSelect:focus {
  outline: 2px solid var(--formOutLineColor);
  box-shadow: none;
}
.formSelect::-moz-placeholder {
  color: inherit;
}
.formSelect::placeholder {
  color: inherit;
}
.formSelect:focus::-moz-placeholder {
  color: transparent;
}
.formSelect:focus::placeholder {
  color: transparent;
}

.formTextArea {
  -moz-appearance: none;
  -webkit-appearance: none;
  appearance: none;
  width: 100%;
  min-height: 200px;
  padding: calc(12 / 16 * 1rem) calc(12 / 16 * 1rem);
  border: 1px solid var(--formBorderColor);
  border-radius: 5px;
  background-image: none;
  background-color: #fff;
  color: inherit;
  font-size: calc(16 / 16 * 1rem);
  white-space: pre-wrap;
}
.formTextArea:focus {
  outline: 2px solid var(--formOutLineColor);
  box-shadow: none;
}
.formTextArea::-moz-placeholder {
  color: inherit;
}
.formTextArea::placeholder {
  color: inherit;
}
.formTextArea:focus::-moz-placeholder {
  color: transparent;
}
.formTextArea:focus::placeholder {
  color: transparent;
}

.formCheck {
  display: flex;
  flex-wrap: wrap;
  padding-left: calc(10 / 16 * 1rem);
  gap: calc(5 / 16 * 1rem) calc(10 / 16 * 1rem);
}
.formCheck > p {
  display: inherit;
  flex-direction: inherit;
  flex-wrap: inherit;
  padding-left: inherit;
  gap: inherit;
}
.formCheck label {
  position: relative;
}
.formCheck input[type=checkbox] {
  z-index: 10;
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  margin: 0;
  cursor: pointer;
  opacity: 0;
}
.formCheck input[type=checkbox] + span {
  display: inline-block;
  position: relative;
  margin: 0 0.2em 0;
  padding: 0 0 0 calc(25 / 16 * 1rem);
  font-size: calc(16 / 16 * 1rem);
  line-height: 1.714285;
  letter-spacing: 0.04em;
  cursor: pointer;
}
.formCheck input[type=checkbox] + span::before {
  -webkit-transform: translateY(-50%);
  display: block;
  position: absolute;
  top: calc(15 / 16 * 1rem);
  left: 0;
  width: 1em;
  height: 1em;
  border: 1px solid var(--formBorderColor);
  border-radius: 2px;
  background: #fff;
  content: "";
}
.formCheck input[type=checkbox] + span::after {
  -webkit-transform: translateY(-50%) rotate(-45deg);
  display: block;
  position: absolute;
  top: calc(12 / 16 * 1rem);
  left: 1px;
  width: 1em;
  height: 0.6em;
  transform: translateY(-50%) rotate(-45deg);
  border-bottom: 3px solid var(--formCheckBoxColor);
  border-left: 3px solid var(--formCheckBoxColor);
  content: "";
  opacity: 0;
  transition: all 0.3s ease 0s;
}
.formCheck input[type=checkbox]:checked + span::before {
  background: #fff;
}
.formCheck input[type=checkbox]:checked + span::after {
  opacity: 1;
}
.formCheck input[type=checkbox]:focus-visible + span {
  outline: 2px solid var(--formOutLineColor);
}
.formCheck .c-text {
  margin-top: initial !important;
}

.formAgree {
  position: relative;
}
.formAgree p {
  display: contents;
}
.formAgree label {
  position: relative;
}
.formAgree input[type=checkbox] {
  z-index: 10;
  position: absolute;
  top: 50%;
  left: 0;
  width: calc(30 / 16 * 1rem);
  height: calc(30 / 16 * 1rem);
  margin: 0;
  transform: translateY(-50%);
  cursor: pointer;
  opacity: 0;
}
.formAgree span {
  display: inline-block;
  position: relative;
  padding: 0 0 0 calc(50 / 16 * 1rem);
  font-weight: var(--bold);
  font-size: calc(16 / 16 * 1rem);
  line-height: 2;
  cursor: pointer;
}
.formAgree span a {
  text-decoration: underline;
}
.formAgree span::before {
  -webkit-transform: translateY(-50%);
  display: block;
  position: absolute;
  top: 50%;
  left: 0;
  width: calc(30 / 16 * 1rem);
  height: calc(30 / 16 * 1rem);
  transform: translateY(-50%);
  border: 1px solid var(--formBorderColor);
  border-radius: 5px;
  background: #fff;
  content: "";
}
.formAgree span::after {
  -webkit-transform: translateY(-50%) rotate(-45deg);
  display: block;
  position: absolute;
  top: 50%;
  left: calc(5 / 16 * 1rem);
  width: 1.5em;
  height: 0.6em;
  transform: translateY(-55%) rotate(-45deg);
  border-bottom: 3px solid var(--formAgreeColorColor);
  border-left: 3px solid var(--formAgreeColorColor);
  content: "";
  opacity: 0;
  transition: all 0.3s ease 0s;
}
.formAgree input[type=checkbox]:checked ~ span::before {
  background: #fff;
}
.formAgree input[type=checkbox]:checked ~ span::after {
  opacity: 1;
}
.formAgree input[type=checkbox]:focus-visible ~ span {
  outline: 2px solid var(--formOutLineColor);
}
.formAgree .formAgree__link {
  display: block;
  z-index: 2;
  position: absolute;
  top: 0;
  left: calc(50 / 16 * 1rem);
  width: calc(150 / 16 * 1rem);
  height: 1.8em;
  border-bottom: 1px solid var(--base-color);
  background: transparent;
  transition: background 0.3s ease;
}

.formBtn {
  -webkit-appearance: none;
  display: inline-block;
  flex: 0 0 calc(180 / 16 * 1rem);
  min-height: calc(60 / 16 * 1rem);
  margin: 0;
  padding: calc(5 / 16 * 1rem);
  border: none;
  background-image: none;
  background-color: #fff;
  color: var(--base-color);
  font-weight: var(--bold);
  font-weight: 700;
  font-size: calc(16 / 16 * 1rem);
  letter-spacing: 0.1em;
  text-decoration: none;
  cursor: pointer;
  transition: opacity 0.3s ease;
}
@media (hover: hover) {
  .formBtn:hover {
    opacity: 0.7;
  }
}
.formBtn.is_confirm {
  background: var(--formConfirmColor);
}
.formBtn:disabled {
  background: var(--formDisableColor);
  pointer-events: none;
}
.formBtn:hover, .formBtn:focus {
  outline: none;
}
.formBtn::-moz-foucus-inner {
  padding: 0;
  border: none;
}
.formBtn:focus-visible {
  outline: 1px solid var(--formOutLineColor);
}

.formPolicy {
  width: 100%;
  height: calc(400 / 16 * 1rem);
  padding: calc(10 / 16 * 1rem);
  overflow-y: scroll;
  border: 1px solid #333;
  background: #fff;
}
.formPolicy .formPolicy__text {
  font-size: calc(16 / 16 * 1rem);
  line-height: 1.7142;
  letter-spacing: 0.04em;
}

.wpcf7-spinner {
  display: none;
}

.wpcf7-list-item {
  margin: 0;
}

.wpcf7-response-output {
  display: none;
}

.wpcf7 form .wpcf7-response-output {
  border: none;
}

.js_confirmArea {
  display: none;
}

.p-drawer-menu {
  display: none;
}
@media screen and (max-width: 767px) {
  .p-drawer-menu {
    display: block;
    visibility: hidden;
    z-index: var(--drawer);
    position: fixed;
    top: var(--header-height-sp);
    right: 0;
    bottom: 0;
    left: 0;
    width: 100%;
    height: calc(100% - (80 / 16 * 1rem));
    padding-bottom: calc(100 / 16 * 1rem);
    overflow-y: scroll;
    background: #ccc;
    background: #ccc;
    background: #fff;
    background: #ddd;
    background: #EEe;
    opacity: 0;
    pointer-events: none;
    transition: opacity var(--duration), visibility var(--duration), -webkit-clip-path var(--duration);
    transition: opacity var(--duration), visibility var(--duration), clip-path var(--duration);
    transition: opacity var(--duration), visibility var(--duration), clip-path var(--duration), -webkit-clip-path var(--duration);
  }
}
@media screen and (min-width: 768px) {
  .p-drawer-menu {
    display: none;
  }
}

.p-drawer-menu[aria-hidden=false],
.p-drawer-menu:popover-open {
  visibility: revert;
  opacity: 1;
  pointer-events: auto;
}

.p-drawer-menu__items {
  display: block;
  width: 100%;
  height: initial;
  margin-inline: auto;
  padding-inline: var(--padding-pc);
  padding-block: calc(135 / 16 * 1rem) calc(110 / 16 * 1rem);
}
@media screen and (max-width: 767px) {
  .p-drawer-menu__items {
    padding-inline: var(--padding-sp);
    padding-block: calc(50 / 16 * 1rem) calc(100 / 16 * 1rem);
  }
}

.p-drawer-menu__item {
  border-bottom: 1px solid var(--white);
}
.p-drawer-menu__item a {
  display: block;
  display: flex;
  position: relative;
  align-items: center;
  width: 100%;
  height: 100%;
  min-height: calc(80 / 16 * 1rem);
  padding: calc(10 / 16 * 1rem);
  gap: calc(20 / 16 * 1rem);
  font-size: calc(28 / 16 * 1rem);
  line-height: 1.4285714286;
  text-align: center;
  text-align: left;
  transition: opacity 0.3s ease;
}
@media screen and (max-width: 767px) {
  .p-drawer-menu__item a {
    min-height: calc(60 / 16 * 1rem);
    font-size: calc(18 / 16 * 1rem);
    line-height: 1.4444444444;
  }
}
.p-drawer-menu__item a::before {
  -webkit-clip-path: polygon(0 0, 0% 100%, 100% 50%);
  display: block;
  flex: 0 0 calc(20 / 16 * 1rem);
  width: calc(20 / 16 * 1rem);
  height: calc(29 / 16 * 1rem);
  background: var(--black);
  content: "";
          clip-path: polygon(0 0, 0% 100%, 100% 50%);
}
@media screen and (max-width: 767px) {
  .p-drawer-menu__item a::before {
    flex: 0 0 calc(12 / 16 * 1rem);
    width: calc(12 / 16 * 1rem);
    height: calc(17 / 16 * 1rem);
  }
}
@media (hover: hover) {
  .p-drawer-menu__item a:hover {
    opacity: 0.7;
  }
}

.p-drawer-menu__bottom a {
  display: block;
  display: flex;
  align-items: center;
  min-height: calc(80 / 16 * 1rem);
  padding: calc(10 / 16 * 1rem) 0;
  color: var(--white);
  font-size: calc(22 / 16 * 1rem);
  text-align: left;
  transition: opacity 0.3s ease;
}
@media screen and (max-width: 767px) {
  .p-drawer-menu__bottom a {
    min-height: calc(60 / 16 * 1rem);
    font-size: calc(14 / 16 * 1rem);
  }
}
@media (hover: hover) {
  .p-drawer-menu__bottom a:hover {
    opacity: 0.7;
  }
}

.p-footer {
  padding: calc(32 / 16 * 1rem) calc(32 / 16 * 1rem) calc(60 / 16 * 1rem);
}
@media screen and (max-width: 767px) {
  .p-footer {
    padding: calc(58 / 16 * 1rem) 0 calc(32 / 16 * 1rem);
  }
}

.p-footer__inner {
  display: flex;
  align-items: center;
}
@media screen and (max-width: 767px) {
  .p-footer__inner {
    display: block;
  }
}

.p-footer__logo {
  width: calc(70 / 16 * 1rem);
}
@media screen and (max-width: 767px) {
  .p-footer__logo {
    width: calc(70 / 16 * 1rem);
    margin: auto;
  }
  .p-footer__logo img {
    -o-object-fit: contain;
    width: 100%;
    height: 100%;
       object-fit: contain;
  }
}

.p-footer__body {
  margin-left: auto;
}
@media screen and (max-width: 767px) {
  .p-footer__body {
    margin-top: calc(8 / 16 * 1rem);
  }
}

.p-footer__items {
  display: flex;
  align-items: center;
}
@media screen and (max-width: 767px) {
  .p-footer__items {
    display: block;
  }
}

.p-footer__item {
  position: relative;
  color: var(--white);
  font-size: calc(16 / 16 * 1rem);
  text-align: center;
}

.p-footer__item::after {
  display: block;
  width: 100%;
  height: 1px;
  margin-top: calc(5 / 16 * 1rem);
  background: var(--back);
  content: "";
  opacity: 0;
  transition: 0.3s;
}

.p-footer__item:hover::after {
  opacity: 1;
}

.p-footer__item + .p-footer__item {
  margin-top: initial;
  margin-left: calc(32 / 16 * 1rem);
}
@media screen and (max-width: 767px) {
  .p-footer__item + .p-footer__item {
    margin-top: calc(8 / 16 * 1rem);
    margin-left: initial;
  }
}

.p-footer__copy {
  padding-bottom: calc(60 / 16 * 1rem);
  color: var(--white);
  font-size: calc(11 / 16 * 1rem);
  text-align: center;
}
@media screen and (max-width: 767px) {
  .p-footer__copy {
    font-size: calc(11 / 16 * 1rem);
  }
}

.p-header-menu {
  display: flex;
  align-items: center;
}
@media screen and (max-width: 767px) {
  .p-header-menu {
    display: none;
  }
}

.p-header-menu__items {
  display: flex;
  align-items: center;
  height: 100%;
  gap: calc(50 / 16 * 1rem);
}

.p-header-menu__item {
  display: flex;
  position: relative;
  align-items: center;
  height: 100%;
  font-size: calc(12 / 16 * 1rem);
}
.p-header-menu__item::after {
  display: block;
  z-index: 2;
  position: absolute;
  top: 50%;
  left: 50%;
  aspect-ratio: 1;
  width: calc(8 / 16 * 1rem);
  transform: translate(-50%, -50%);
  border-radius: 50%;
  background: var(--base-color);
  content: "";
  opacity: 0;
  transition: all 0.5s ease;
}
.p-header-menu__item a {
  display: flex;
  align-items: center;
  height: 100%;
  gap: calc(9 / 16 * 1rem);
}
@media (hover: hover) {
  .p-header-menu__item:hover::after {
    transform: translate(-50%, -300%);
    opacity: 1;
  }
}

.p-header-menu__btn {
  display: flex;
  align-items: center;
  height: 100%;
  font-size: calc(16 / 16 * 1rem);
}

.p-header-menu__item--subMenu {
  cursor: pointer;
}
@media (hover: hover) {
  .p-header-menu__item--subMenu:hover .p-header-menu__subItems {
    visibility: visible;
    opacity: 1;
    pointer-events: auto;
  }
}

.p-header-menu__subItems {
  display: grid;
  visibility: hidden;
  position: absolute;
  bottom: 0;
  grid-template-columns: repeat(2, 1fr);
  width: -moz-fit-content;
  width: fit-content;
  padding: calc(30 / 16 * 1rem) calc(40 / 16 * 1rem);
  gap: calc(20 / 16 * 1rem);
  transform: translateY(100%);
  border-radius: 30px;
  background: var(--white);
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
  opacity: 0;
  pointer-events: none;
  transition: all 0.3s ease;
}

.p-header-menu__subItem {
  position: relative;
  width: calc(170 / 16 * 1rem);
  padding-left: calc(16 / 16 * 1rem);
  font-size: calc(13 / 16 * 1rem);
  transition: padding-left 0.3s ease;
}
.p-header-menu__subItem::before {
  display: block;
  z-index: 2;
  position: absolute;
  top: 50%;
  left: 0;
  aspect-ratio: 1;
  width: calc(8 / 16 * 1rem);
  transform: translate(0, -50%);
  border-radius: 50%;
  background: rgba(204, 204, 204, 0.7);
  content: "";
  transition: background 0.3s ease;
}
@media (hover: hover) {
  .p-header-menu__subItem:hover {
    padding-left: calc(20 / 16 * 1rem);
  }
  .p-header-menu__subItem:hover::before {
    background: var(--base-color);
  }
}

:root {
  --header-height: calc(100 / 16 * 1rem);
  --header-height-sp: calc(80 / 16 * 1rem);
}

.p-header {
  display: flex;
  z-index: var(--header);
  position: fixed;
  top: 0;
  right: 0;
  left: 0;
  width: 100%;
  height: var(--header-height);
  background: var(--white);
  transition: background 0.3s ease;
}
@media screen and (max-width: 767px) {
  .p-header {
    height: var(--header-height-sp);
  }
}
@media print {
  .p-header {
    position: absolute;
  }
}
.p-header.is_active {
  background: #ccc;
}

.p-header__inner {
  display: flex;
  justify-content: space-between;
  width: 100%;
  height: auto;
  padding-inline: calc(50 / 16 * 1rem) calc(50 / 16 * 1rem);
  gap: calc(20 / 16 * 1rem);
}
@media screen and (max-width: 767px) {
  .p-header__inner {
    padding-inline: calc(30 / 16 * 1rem);
  }
}

.p-header__logo {
  display: flex;
  align-items: center;
  width: calc(150 / 16 * 1rem);
  height: initial;
}
.p-header__logo a {
  display: block;
  width: 100%;
}
@media screen and (max-width: 767px) {
  .p-header__logo {
    width: calc(120 / 16 * 1rem);
  }
}

.p-header__logo img {
  display: flex;
  align-items: center;
  width: 100%;
  height: 100%;
}

.p-header__drawerBtn {
  display: none;
}
@media screen and (max-width: 767px) {
  .p-header__drawerBtn {
    display: grid;
    z-index: var(--hamburger);
    position: relative;
    place-content: center;
  }
}

.p-panels {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  gap: calc(65 / 16 * 1rem) calc(48 / 16 * 1rem);
}
@media screen and (max-width: 767px) {
  .p-panels {
    grid-template-columns: repeat(2, 1fr);
    gap: calc(20 / 16 * 1rem);
  }
}

.p-qa {
  padding-top: calc(52 / 16 * 1rem);
  background: var(--color-back-green);
}
@media screen and (max-width: 767px) {
  .p-qa {
    padding-top: calc(50 / 16 * 1rem);
  }
}

.p-qa__head {
  text-align: center;
}

.p-qa__body {
  margin-top: calc(80 / 16 * 1rem);
}
@media screen and (max-width: 767px) {
  .p-qa__body {
    margin-top: calc(60 / 16 * 1rem);
  }
}

.p-qa__accordion:nth-child(n+2) {
  margin-top: calc(25 / 16 * 1rem);
}
@media screen and (max-width: 767px) {
  .p-qa__accordion:nth-child(n+2) {
    margin-top: calc(15 / 16 * 1rem);
  }
}

@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}
@keyframes fadeOut {
  from {
    opacity: 1;
  }
  to {
    opacity: 0;
  }
}
.sp_only {
  display: none;
}
@media screen and (max-width: 767px) {
  .sp_only {
    display: block;
  }
}

@media screen and (max-width: 767px) {
  .pc_only {
    display: none;
  }
}

/* ドロワーメニュー展開時背景固定 */
@media screen and (max-width: 767px) {
  body:has(.c-hamburger[aria-expanded=true]) {
    overflow: hidden;
  }
}

body:has(dialog[open]) {
  overflow: hidden;
}

body {
  overflow-y: scroll; /* 常にスクロールバーを表示 */
}

.siteWrapper:has(dialog[open]) {
  overflow-y: auto;
  scrollbar-gutter: stable; /* スクロールバーのスペースを常に確保する */
}

dialog[open] {
  animation-duration: 200ms;
  animation-timing-function: ease-out;
  animation-fill-mode: forwards;
  animation-name: fadeIn;
}

dialog:not([open]) {
  animation-duration: 200ms;
  animation-timing-function: ease-out;
  animation-fill-mode: forwards;
  animation-name: fadeOut;
}

.siteWrapper {
  overflow-x: clip;
}

.siteWrapper {
  padding-top: var(--header-height);
}
@media screen and (max-width: 767px) {
  .siteWrapper {
    padding-top: var(--header-height-sp);
  }
}

.hover {
  transition: opacity var(--duration);
}
@media (any-hover: hover) {
  .hover:hover {
    opacity: 0.7;
  }
}
/*# sourceMappingURL=styles.css.map */
